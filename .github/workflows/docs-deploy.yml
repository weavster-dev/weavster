name: Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'src/**/*.py'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up the environment
        uses: ./.github/actions/setup-python-env

      - name: Configure Git for mkdocs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Build documentation
        run: uv run mkdocs build --clean --strict

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

  deploy-docs:
    needs: build-docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-with-mkdocs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up the environment
        uses: ./.github/actions/setup-python-env

      - name: Configure Git for mkdocs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Deploy with mkdocs gh-deploy
        run: uv run mkdocs gh-deploy --force

  notify-docs-update:
    needs: [deploy-docs, deploy-with-mkdocs]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-docs.result == 'success' || needs.deploy-with-mkdocs.result == 'success')
    steps:
      - name: Create documentation update comment
        uses: actions/github-script@v7
        with:
          script: |
            // Find recent PRs that might have contributed to this docs update
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'main',
              sort: 'updated',
              direction: 'desc',
              per_page: 5
            });

            for (const pr of prs) {
              if (pr.merged_at && new Date(pr.merged_at) > new Date(Date.now() - 24*60*60*1000)) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: `ðŸ“š **Documentation Updated!**\n\nThe documentation has been updated and deployed.\n\nðŸ”— **View docs:** https://weavster-dev.github.io/weavster/`
                });
              }
            }
