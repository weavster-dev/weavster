name: Manual Release

permissions:
  contents: write

on:
  release:
    types: [published, edited]

jobs:
  check-release-action:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      should_deploy_docs: ${{ steps.check.outputs.should_deploy_docs }}
      docs_only: ${{ steps.check.outputs.docs_only }}
    steps:
      - name: Check release body for keywords
        id: check
        run: |
          RELEASE_BODY="${{ github.event.release.body }}"
          echo "Release body: $RELEASE_BODY"

          # Check for docs-only deployment
          if echo "$RELEASE_BODY" | grep -i "\[docs-only\]" || echo "$RELEASE_BODY" | grep -i "\[deploy-docs\]"; then
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "should_deploy_docs=true" >> $GITHUB_OUTPUT
            echo "docs_only=true" >> $GITHUB_OUTPUT
            echo "üîÑ Docs-only deployment requested"
          # Check for skip publishing (but allow docs)
          elif echo "$RELEASE_BODY" | grep -i "\[skip-publish\]" || echo "$RELEASE_BODY" | grep -i "\[no-publish\]"; then
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "should_deploy_docs=true" >> $GITHUB_OUTPUT
            echo "docs_only=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Publishing skipped, docs deployment enabled"
          # Check for skip docs
          elif echo "$RELEASE_BODY" | grep -i "\[skip-docs\]" || echo "$RELEASE_BODY" | grep -i "\[no-docs\]"; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "should_deploy_docs=false" >> $GITHUB_OUTPUT
            echo "docs_only=false" >> $GITHUB_OUTPUT
            echo "üì¶ Publishing enabled, docs deployment skipped"
          # Default: do both for new releases, docs-only for edited releases
          elif [[ "${{ github.event.action }}" == "published" ]]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "should_deploy_docs=true" >> $GITHUB_OUTPUT
            echo "docs_only=false" >> $GITHUB_OUTPUT
            echo "üöÄ Full release: publishing and docs deployment"
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "should_deploy_docs=true" >> $GITHUB_OUTPUT
            echo "docs_only=true" >> $GITHUB_OUTPUT
            echo "üìù Release edited: docs-only deployment"
          fi

  set-version:
    runs-on: ubuntu-latest
    needs: check-release-action
    if: needs.check-release-action.outputs.should_publish == 'true'
    outputs:
      release_tag: ${{ steps.vars.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Export tag
        id: vars
        run: echo tag=${GITHUB_REF#refs/*/} >> $GITHUB_OUTPUT

      - name: Update project version
        run: |
          sed -i "s/^version = \".*\"/version = \"$RELEASE_VERSION\"/" pyproject.toml
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}

      - name: Upload updated pyproject.toml
        uses: actions/upload-artifact@v4
        with:
          name: pyproject-toml
          path: pyproject.toml

  publish:
    runs-on: ubuntu-latest
    needs: [check-release-action, set-version]
    if: needs.check-release-action.outputs.should_publish == 'true'
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-python-env

      - name: Download updated pyproject.toml
        uses: actions/download-artifact@v4
        with:
          name: pyproject-toml

      - name: Build package
        run: uv build

      - name: Publish package
        run: uv publish
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Comment on successful publish
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.release.id,
              body: `‚úÖ **Package Published Successfully!**\n\nüì¶ **PyPI**: https://pypi.org/project/weavster/${{ needs.set-version.outputs.release_tag }}/\nüè∑Ô∏è **Version**: ${{ needs.set-version.outputs.release_tag }}`
            });

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [check-release-action, publish]
    if: |
      always() &&
      needs.check-release-action.outputs.should_deploy_docs == 'true' &&
      (needs.publish.result == 'success' || needs.publish.result == 'skipped')
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up the environment
        uses: ./.github/actions/setup-python-env

      - name: Deploy documentation
        run: uv run mkdocs gh-deploy --force

      - name: Comment on successful docs deployment
        uses: actions/github-script@v7
        with:
          script: |
            const docsOnly = ${{ needs.check-release-action.outputs.docs_only }};
            const emoji = docsOnly ? "üìö" : "üöÄ";
            const title = docsOnly ? "Documentation Updated!" : "Release Complete!";

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.release.id,
              body: `${emoji} **${title}**\n\nüìñ **Documentation**: https://weavster-dev.github.io/weavster/\nüîÑ **Deployed from**: ${{ github.event.release.tag_name }}`
            });
